package org.laetproject.commands;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.events.interaction.component.StringSelectInteractionEvent;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.selections.StringSelectMenu;
import net.dv8tion.jda.api.utils.messages.MessageCreateBuilder;
import net.dv8tion.jda.internal.interactions.component.StringSelectMenuImpl;
import org.jetbrains.annotations.NotNull;
import org.laetproject.Bot;

import java.awt.*;

public class HelpCommand extends ListenerAdapter {

    @Override
    public void onMessageReceived(@NotNull MessageReceivedEvent event) {
        String[] command = event.getMessage().getContentRaw().trim().split(" ");
        if (command[0].equalsIgnoreCase(Bot.PREFIX + "help")) {

            EmbedBuilder embed = getEmbedBuilder();
            StringSelectMenu commands = getSelectMenu();

            MessageCreateBuilder messageCreateBuilder = new MessageCreateBuilder()
                    .addContent(event.getMember().getAsMention())
                    .addEmbeds(embed.build())
                    .addActionRow(commands.asEnabled());

            event.getChannel().sendMessage(messageCreateBuilder.build()).queue();
        }
    }


    @Override
    public void onStringSelectInteraction(@NotNull StringSelectInteractionEvent event) {
        event.deferReply().setEphemeral(true).queue();

        switch (event.getInteraction().getValues().get(0)) {
            case "sortear" ->
                    event.getHook().sendMessage(createEmbedOption("Ajuda para: sortear", "Se for usar um arquivo, atenda aos crit√©rios de:\n" +
                            "- T√≠tulo dos filmes em ingl√™s\n" +
                            "- Separados por quebra de linha (um filme por linha)\n\n" +
                            "Se for usar uma lista de filmes por escrito, atenda aos crit√©rios:\n" +
                            "- T√≠tulo dos filmes em ingl√™s\n" +
                            "- Filmes entre aspas e separados por virgula, por exemplo: \"Filme1\", \"Filme2\", \"Filme3\"\n" +
                            "**√â poss√≠vel utilizar as duas formas de inser√ß√£o de filmes ao mesmo tempo**", "Uso", """
                            `/sortear <filmes>
                            /sortear <arquivo.txt>
                            /sortear <filmes> <arquivo.txt>`""")
                            .build()).setEphemeral(true).queue();

            case "recado" ->
                    event.getHook().sendMessage(createEmbedOption("Ajuda para: recado", "O BBBot envia um recado üòØ", "Uso", "`/recado <recado>`")

                            .build()).setEphemeral(true).queue();
            case "emocao" ->
                    event.getHook().sendMessage(createEmbedOption("Ajuda para: emocao", "Selecione as emo√ß√µes pr√©-definidas para receber uma mensagem", "Uso", "`/emocao`")
                            .build()).setEphemeral(true).queue();

            case "info" ->
                    event.getHook().sendMessage(createEmbedOption("Ajuda para: info", "Informa√ß√µes b√°sicas sobre voc√™.", "Uso", "`/info`")
                            .build()).setEphemeral(true).queue();

            case "darcargo" ->
                    event.getHook().sendMessage(createEmbedOption("Ajuda para: darcargo", "O BBBOt atribui um cargo que esteja abaixo dele a algum membro", "Uso", "`/darcargo <membro> <cargo>`")
                            .build()).setEphemeral(true).queue();

            case "cargo" ->
                    event.getHook().sendMessage(createEmbedOption("Ajuda para: cargo", "Lista os cargos do servidor", "Uso", "`/cargo`")
                            .build()).setEphemeral(true).queue();

        }
    }

    @NotNull
    private EmbedBuilder getEmbedBuilder() {
        EmbedBuilder embed = new EmbedBuilder();
        embed.setColor(new Color(0x0BFF00));
        embed.setTitle("Help");

        embed.setDescription("""
                --------------------------
                        **Help BBBot**
                ---------------------------""");

        embed.addField("**Comandos de barra**",
                "`sortear`: _Insira uma lista de filmes para sortear_" +
                        "\n`recado`: _Manda um recado por BBBot_ üòØ" +
                        "\n`emocao`: _Manda uma mensagem com emo√ß√µes pr√©-definidas_" +
                        "\n`info`: _Manda informa√ß√µes b√°sicas sobre voc√™_" +
                        "\n`darcargo`: _O BBBot adiciona um cargo a algum membro_" +
                        "\n`cargo`: _Lista os cargos do servidor_" +
                        "\n`addpalavra`: **Depreciado**", false);
        return embed;
    }

    private MessageCreateBuilder createEmbedOption(String title, String description, String field, String valueField) {
        EmbedBuilder embed = new EmbedBuilder();
        embed.setColor(new Color(0x000000));
        embed.setTitle(title);
        embed.setDescription(description);
        embed.addField(field, "`" + valueField + "`", false);
        MessageCreateBuilder messageCreateBuilder = new MessageCreateBuilder();
        messageCreateBuilder.setEmbeds(embed.build());

        return messageCreateBuilder;
    }

    @NotNull
    private StringSelectMenu getSelectMenu() {
        return StringSelectMenu.create("menu:help")
                .setPlaceholder("Escolha um comando para mais informa√ß√µes")
                .setRequiredRange(1, 1)
                .addOption("sortear", "sortear", "Insira uma lista de filmes para sortear")
                .addOption("recado", "recado", "Manda um recado por BBBot ")
                .addOption("emocao", "emocao", "Manda uma mensagem com emo√ß√µes pr√©-definidas")
                .addOption("info", "info", "Manda informa√ß√µes b√°sicas sobre voc√™")
                .addOption("darcargo", "darcargo", "O BBBot adiciona um cargo a algum membro")
                .addOption("cargo", "cargo", "Lista os cargos do servidor")
                .build();
    }
}